#include "util.cu"
#include "math.cu"
#include "seed.cu"
#include "color.cu"

texture<float4, 2, cudaReadModeElementType> input_texture;

__constant__ float par[40];
__constant__ float2 zn[5];

extern "C" {

  __device__ float2 reduce(float2 z){
    z = vec2((z.x + 1.0) / 2.0, (z.y + 1.0) / 2.0);
    return vec2((z.x - floorf(z.x)) * 2.0 - 1.0, (z.y - floorf(z.y)) * 2.0 - 1.0);
  }

  __global__ void kernel_fb(float4* out, ulong out_pitch, uchar4* pbo, int kernel_dim)
  {
    unsigned int x = blockIdx.x*blockDim.x + threadIdx.x;
    unsigned int y = blockIdx.y*blockDim.y + threadIdx.y;

    float nn = %FRACT%;
    float4 result = vec4(0.0, 0.0, 0.0, 0.0);

    float2 z_z = vec2(2.0 * (x + 0.5 ) / kernel_dim - 1.0, 2.0 * (y + 0.5 ) / kernel_dim - 1.0);    	
    float2 z = vec2(0.0, 0.0);    

    for(z.x = z_z.x - 1.0 / kernel_dim; z.x <= z_z.x + 1.0 / kernel_dim + 0.000001; z.x += 2.0 / (kernel_dim * (nn - 1.0)))
      for(z.y = z_z.y - 1.0 / kernel_dim; z.y <= z_z.y + 1.0 / kernel_dim + 0.000001; z.y += 2.0 / (kernel_dim * (nn - 1.0))){

	float2 z_c = reduce(%T%);   

	float4 frame = tex2D(input_texture, (z_c.x + 1.0) / 2.0, (z_c.y + 1.0) / 2.0);    

	float4 seed = %SEED%(z_c);    

	result = result ^ (seed.w % seed) ^ ((1.0 - seed.w) % frame); 

      }
    
    result = %COLORIFY%((1.0 / (nn * nn)) % result);

    // set output variable
    out[y * out_pitch + x] = result;
    pbo[y * kernel_dim + x] = make_uchar4(255.0 * result.x, 255.0 * result.y, 255.0 * result.z, 255.0 * result.w); 
  }

}
