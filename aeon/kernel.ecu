__constant__ float par[40];
__constant__ float2 zn[16];
__constant__ float internal[10];
__constant__ int component_idx[10][2];
__constant__ float _clock;
__constant__ float switch_time;

%PAR_NAMES%

%CULL_ENABLED%

#define PI 3.1415926535f
#define $I vec2(0.0, 1.0)

#include "util.cu"
#include "math.cu"
#include "colorspace.cu"

__device__ float2 grid_reduce(float2 z){
  // standard reduction based on the cartesian grid
  return rem(z + vec2(1.0f, 1.0f), 2.0f) - vec2(1.0f, 1.0f);
}

#include "reset.cu"
#include "color.cu"
#include "reduce.cu"
#include "seed_w.cu"
#include "seed_a.cu"
#include "seed_c.cu"
#include "seed_wt.cu"
#include "__seed.cu"

texture<float4, 2, cudaReadModeElementType> input_texture;
texture<float4, 2, cudaReadModeElementType> aux_texture;

extern "C" {

  __global__ void reset(float4* out, ulong out_pitch){
    unsigned int x = blockIdx.x * blockDim.x + threadIdx.x;
    unsigned int y = blockIdx.y * blockDim.y + threadIdx.y;
    float4 reset, reset0, reset1;
    %RESET%
    out[y * out_pitch + x] = reset;
  }

  __global__ void kernel_fb(float4* out, ulong out_pitch, uchar4* pbo, int kernel_dim,
                            float i_kernel_dim, float m_i_kernel_dim, float i_n_sq, float inc)
  {
    unsigned int x = blockIdx.x * blockDim.x + threadIdx.x;
    unsigned int y = blockIdx.y * blockDim.y + threadIdx.y;

    float4 result = vec4(0.0f, 0.0f, 0.0f, 0.0f);

    // [0, kernel_dim) x [0, kernel_dim) -> [-1, 1] x [-1, 1]
    float2 z = (2.0f * i_kernel_dim) * vec2(x, y) + vec2(i_kernel_dim - 1.0f, i_kernel_dim - 1.0f);
    float2 z_z = z;
    float2 t, t0, t1, t_seed, t_seed0, t_seed1, reduce, reduce0, reduce1;
    float4 seed, seed0, seed1, color, color0, color1;
    /*
    %T%
    z = t;
    %REDUCE%
    float2 z_trans = recover(reduce);

    float4 frame_z_z = tex2D(input_texture, 0.5f * z_trans + vec2(0.5f, 0.5f));
    */

    for(z.x = z_z.x - i_kernel_dim; z.x <= z_z.x + m_i_kernel_dim; z.x += inc)
      for(z.y = z_z.y - i_kernel_dim; z.y <= z_z.y + m_i_kernel_dim; z.y += inc){

        float2 z_c = z;

        %T%
        z = t;
        %REDUCE%
        z = recover(reduce);

        float4 frame = tex2D(input_texture, 0.5f * z + vec2(0.5f, 0.5f));


        %T_SEED%
        z = t_seed;

        %REDUCE%
        z = recover(reduce);

        %SEED%

        seed = _gamma3(seed, 2.2f);

        #ifdef CULL_ENABLED

        float new_w;

        if(frame.w >= 0.0f)
          new_w = (1.0 - seed.w) * (frame.w + 1.0f);
        else
          if(seed.w < 0.0001f)
            new_w = frame.w;
          else
            new_w = 0.0f;

        frame.w = new_w;

        int null = (frame.w < 0.0f || result.w < 0.0f);

        result = result + seed.w * seed + (1.0f - seed.w) * frame;

        if(null)
          result.w = -10000000.0f;

        // cull mode
        if(_CULL_DEPTH != 0.0f){

          if(result.w > 20 * _CULL_DEPTH - 0.000001)
            result = vec4(0.0f, 0.0f, 0.0f, -10000000.0f);
        }

        #else

        result = result + seed.w * seed + (1.0f - seed.w) * frame;

        #endif

        z = z_c;

      }

    float4 v = vec4(i_n_sq * result.x, i_n_sq * result.y, i_n_sq * result.z, result.w);
    %COLOR%;
    result = (1.0f - _COLOR_KILL) * color;

    // set output variables
    out[y * out_pitch + x] = result;
    pbo[y * kernel_dim + x] = make_uchar4(255.0f * result.x, 255.0f * result.y,
                                          255.0f * result.z, 255.0f * result.w);
  }

}
